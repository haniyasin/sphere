/*
 * Черновик новой концепции отображения объектов сферы, а также работы с ними(добавление, удаление, поиск)
 * Если грубо, то смысл все объекты рассматриваются как находяющиеся рядом друг с другом. При этом один объект
 * может быть близок к многим другим. Это похоже не на пространство, которые мы привыкли понимать как 
 * трёхмерную ёмкость, а скорее на то, как мы работаем с объектами в памяти, когда одно и то же кресло
 * может всплывать в памяти и при воспоминании комнаты и любимого чая. Естественно, что если проходить
 * сквозь объекты, это похоже на пространство, но это пространство есть ни что иное как проекция.
 * В случае этого черновика концепции, мы проекцируем на плоскость со слоями. С возможностью увеличивать,
 * отдалять, двигать вверх и вниз. То есть подобно тому, как работают карты современные. Этот способ мне
 * представляется единственным реализуемым на данный момент(в сравнении с полноценным 3d от требует минимум
 * усилий и работает на множестве устройств). Хотя на перспективу конечно же рассматривается вариант
 * полноценной 3d проекции. При этом надо понимать, что всё таки сфера это не пространство в привычном нам
 * понимании, её можно рассматривать как пространство только в конкретный момент времени как результат нашего
 * взора на конкретные объекты сфера. Иными словами пространство - это проекция объектов сферы на которые мы
 * смотрим. С этой точки зрения также важно посмотреть на то, что ни проекция в виде карты, ни проекция в виде
 * 3d пространства не является постоянными, а изменяется мгновенно от изменения нашего взора. То есть достаточно
 * заострить своё внимение на каком-то объекте и то, что мы видим изменится. Опять же это похоже на то как
 * работает наша память.
 * 
 * Данная концепция двигает меня дальше в понимании что такое сфера, но честно говоря, я всё ещё не понимаю
 * как должен выглядеть конечный результат. Вполне вероятно, что эта концепция будет работать как надо и 
 * годится для публичного использования.       
 */


/*
 * Возможные объекты в сфере. Каждый объект должен реализовать некоторый обязательный набор методов.
 */
function app(){
    //устанавливает координаты для отображения, на некотором виртуальном холсте. View сам определяет это.
    this.set_coords = function (x, y) {
	
    };

    //заставляет отображаться в минимальном размере, это обычное поведение.
    this.small = function(){
    };
   
    /*
     * заставляет отображаться в максимальном размере. В некоторых случаях это значит занять всю область
     * view. Это нужно для любого большого содержимого, но даже такое содержимое всегда обязано уметь
     * отображаться в маленьком размере.
     */ 
    this.full = function(){
    };
}

function text(){
    
}

function image(){
    
}

function video(){
    
}


/*
 * некоторое базовое определение того, что же такое объект или частица сферы
 * Важно понимать, что сам объект не имеет какого-то расположения. А те объекты, которые указаны
 * вокруг него не находятся только вокруг него. То есть невозможно взять и построить пространство с объектами
 * просто пройдя через них. Точнее можно, но это пространство будет проекцией того пути, через который объекты
 * просматривались. Если зайти с других объектов, то и пространство будет отличаться. В этом смысл, на одни
 * и те же объекты можно смотреть с разных позиций и видеть разное.
 *
 */
function sobject(){
    /*
     * uuid объекта, используется для загрузки объекта из хранилища и последующего отображения во view
     */
    this.id;
    
    /*
     * само загруженное представление объекта, возможны следующие варианты: text, image, video, app
     */
    this._object;

    /*
     * объекты, находящиеся вокруг этого. Каждый объект имеет свои координаты x и y, если считать что,
     * сам объект, вокруг котого они расставляются это 0,0 
     * Пример: { x : 1, y : -2, object : sobject } 
     */
    this.around = [];
}

/*
 * окно, в котором смотрим на объекты, работаем с ними и тд
 */
function view(){
    // просто перемещает видимую область в верх, низ, лево, право
    this.change_point_of_view = function(x, y){
	
    };

    /* увеличивает на одну единицу одновременно с перемещением области. Это важно, так как увеличивать
     * нужно в близи желаемого места, чтобы разглядеть что там.
     */
    this.zoomin = function(x, y){
    };

    /* просто отдаление на единицу, фактически возвращение к предыдущему месту. Но это весьма условно, ведь
     * как уже было сказано выше мы имеем дело не с обычным пространством, а чем-то, что меняется от нашего
     * взора на него. А это значит, когда мы выделили что-то в приближенной области, это может изменить и то,
     * что мы видем до приближения.
     */
    this.zoomout = function(){
    };

    /*
     * Выделение какого-то объекта, находящегося по указанным координатам. Выделенный объект используется как
     * точка отсчёта для всего, что мы видим. Если выделить несколько объектов, то мы будем видеть только то,
     * что находится как бы между ними, то есть то, что близко этим объектам(всем им).
     */
    this.select = function(x, y){
    };

    //снятие выделения. Конечно меняется и то, что мы видим.
    this.unselect = function(x, y){
    };
}