* Попытка описать кто за что отвечает и как это всё работает.
** client
   Это именно то с чем будет иметь дело пользователь storage swarm. Сами же клиенты работают с
   серверами, прежде всего с локальным сервером по client-server протоколу, который описан в файле protocol.js
   Пока предполагается три клиента:
   + linux fuse client
     Позволяет создавать и управлять хранилищем, монтировать его как файловую систему, в качестве параметров 
     можно указывать настройки хранилища и параметры соединения с ним.
     Основной и пока работа будет сосредоточна на нём, прежде всего потому что руки у меня две, а лично мне
     для реальной жизни нужен именно этот клиент.
     Реализуется на c++ с использованием fuse библиотеки. Взаимодействие с сервером идёт через unix socket.
     Проект состоит из двух частей:
     - сам клиент для передачи комманд серверу.
     - fuse сервер, реализующий файловую систему и взаимодействующий с сервером. Инициализируется, запускается
       и останавливается сервером.
   + capsule web client
     Также как предыдущий позволяет всячески управлять хранилищем.
     Сделан в виде графического интерфейса в стиле приложений вроде Проводника. Поддерживает функции вроде drag'n'drop.
     Поскольку использует capsule, то кросплатформенен. Также имеет удобный механизм работы с ссылками.
     Выполнен в виде монолитного приложения на javascript, общающегося с сервером с помощью http версии протокола.
   + cmd windows client
     По сути прямой аналог linux fuse client, но для windows. Как следствие работает также и может тоже самое.
     Также реализованн на С++, более того, развивается вместе с linux fuse client, то есть они разделяют общий код.
     Вместо fuse используется dokan. Взаимодействие идёт через именованные каналы.
     Также как и linux fuse client состоит из двух тех же самых частей.
   + capsule windows client 
     По сути помесь capsule web client и cmd windows client. Позволяет управлять хранилищем в полностью визуальном
     стиле. Но при этом хранилище монтирует локально используя части cmd windows client, что даёт возможность
     работать с хранилищем локальным программам(проводнику, плеерам, просмотрщикам, офисным программам и тд).
     Возможно будет использовать только winapi, в том числе для интерфейса, в том случае если к тому времени
     будет готова версия capsule под windows. Если нет, то интерфейс будет браузерный.
     
** server
   Может содержать хранилища, взаимодействует с другими серверами, образуя swarm. Используется клиентами
   для работы с любыми(локальными, удалёнными) хранилищями, а также другими серверами для поиска или работы
   с хранилищами, которые сам содержит.
   Состоит из следующих частей:
   + storage pool
     механизм управления хранилищами и собственно сам хранениям. Выполнен в виде одного асинхронного даемона
     на С++. Для хранения использует файловую систему. То есть файл и папка это и есть файл и папка.
   + client communicator
     Реализует протокол client-server в как минимум нескольких видах(http, socket|pipe). Для любой работы
     использует storage pool. При работы с данными либо перенаправляет запросы storage pool либо делает минимум
     работы и отправляет запросы storage pool.
   + server communicator
     Реализует протокол server-server в как минимум нескольких видах(http, socket). Для любой работы с 
     хранилищем использует storage pool. Старается быть минимальной прослойкой между другими серверами и storage
     pool. 
     Также обеспечивает механизм репликации, mirror и поиска. Для чего постоянно взаимодействует с несколькими
     серверами.
