* Цели и описание проекта
  Это уже наверное третья попытка проработать цели. Ну ничего, на этот раз уже будет реализация:)
  Суть в том, чтобы дать простой, визуально понятный и главное запоминающийся механизм хранения разнородной
  информации. Так чтобы человек мог как в реальной жизни запоминать где что хранится и работать с данными
  тоже единообразным образом. То есть одним и тем же набором инструметов совершать различные действия. В
  жизни мы делаем это руками, глазами и тд. Вот и работать с информацией нужно одним набором инструментов, а не
  с помощью тысячи и одной программ.
  Но сказать просто, а вот сделать сложнее.

* Как работает, из чего состоит.

  Пользователь попадает на пустой холст. На который может нанести:
  + изображение
  + текст
  + объект
    Объект обязательно принадлежит какому-то типу. Тип либо создаётся вновь, либо выбирается из существующих.
    Объекты одного типа отображаются в одном слое. Это позволяет выбрать только те типы объектов, которые хотите
    видеть. Например у вас карта города и вы хотите видеть только остановки транспорта. Выбираете отображение только
    остановок транспорта. Никакие другие объекты, вроде магазинов, заправок и прочего не отображаются.

   Допустим пользователь создаёт объект дорога и наносит такой объект на холст. Затем создаёт объект остановка и наносит
   два таких объекта вдоль дороги. Теперь он может выбрать в режиме отображения что отображать: 
   + дороги
   + остановки
   + дороги и остановки.
   
   Дальше он может кликнуть на одну из остановок и перед ним откроется чистый холст. На него он может нанести
   всё что знает о остановке, прикрепить фотографии и прочее. Затем проделать то же с другой остановкой.
   Конечно можно и кликнуть на дорогу. На появившемся новеньком холсте нанести всё что нужно знать об этой
   дороге. 

   Таким образом образом пользователь создал два новых типа объекта:
   + дорога
   + остановка
   
   Их можно посмотреть на панеле доступных объектов. Там объекты разделены на две группы:
   + все. То есть вообще все когда-либо созданные пользователями
   + те что используются вместе с тем типом объекта, на холсте которого вы находитесь.
     Например: на холсте объекта карта будут доступны остановки, дороги и прочее. А на холсте музыкального альбома -
     песни, клипы, автор и тд.

   Сами две это группы это холсты, а это значит что все объекты вы можете располагать как пожелаете. Также вы
   можете кликнуть на любой и в появившемся новом холсте добавить например описание типа объекта. Вы можете
   пойти дальше и присвоить объектам тип, заранее создав его. Так вы сможете настроить какие объекты отображать,
   а какие нет.

   В общем с помощью одних и тех же инструментов вы можете создавать объекты, описывать их с помощью других объектов
   и тд.

* где всё хранится
  Может быть несколько вариантов:
  + у вас на устройстве просто как набор файлов
  + в распределённой системе caravan, среди участников
  + в тех доступных хранилищах(скажем dropbox), для которых есть адаптеры

** peer swarm
   В общем пока названия нет, но суть в следующем: каждый пользователь, запускающий у себя сферу выделяет
   некоторое количество гигабайт для хранения данных. Эти гигабайты используются для хранения его данных
   и данных других людей. Допустим он выделяет 10 гигабайт, тогда он может хранить 1 гигабайт, 9ть же
   предоставляется другим. Но в этом случае другие хранят у себя его гигабайт, то есть получаем 10и кратную
   репликацию.
   В результате каждый пользователь получать что-то вроде папки, в которой может хранить файлы. У каждого 
   файла появляется ссылка, которую он может передать любому пользователю, у которого есть браузер. Если
   у принимающего пользователя есть программа сфера, то он может открыть саму папку с файлами и работать с ней
   как с локальной.
   В общем этакий аналог вещей вроде dropbox, но работает это исключительно за счёт самих клиентов, как
   bittorrent

*** как это работает?
    Каждый клиент поддерживает связь с по крайней мере 9ю другими. Для того, чтобы синхронизировать с ними
    свои данные. То есть один клиент вместе с 9ю другими образуют распределённое хранилище с репликацией.
    У этого хранилища есть id. Если кто-то из 10 исчезает, его место занимает другой, новопришедший. То есть
    в один момент времени всегда должно быть так, чтобы одно хранилище реплицировалось на 10 узлов. Запись
    в хранилище транзакционно, то есть запись идёт на один узел, а тот записывает на другие 9ть. И только когда
    данные записаны на все 10 узлов запись считается успешной. Это значит, что скорость записи невысока. 
    Алгоритм записи может быть и другим, например клиент записываеть сразу на 10ть. Но одно неизменно - запись
    всегда считается успешной, если она произведена на все 10 узлов. Чтение может быть параллельным со всех
    10и узлов. Для записи и чтения используется http put, post, get. Также в дальнейшем может быть использован
    и другой протокол, на основе udp.
    Все клиенты оранизуются в dht сеть так, что ключами являются id хранилищь, а данные в хранилищах имеют ключи
    похожие на id хранилищ. Поэтому при поиске данных используется dht.
    Итого:
    + каждый клиент это файловый http сервер, который поддерживает связь с 9ю такими же как он и синхронизирует
      данные.
    + синхронизация данных происходит простейшим способом, возможно с помощью rsync
    + все клиенты образуют единый dht рой
    + все файлы и хранилища(папки) имеют id, которые можно преобразовать в http ссылки и использовать прямо
      в браузере или допустим в плеере для доступа к ним
    + все данные реплицируются как минимум 10 раз
    + клиент в зависимости от платформы предоставляет максимально простой доступ к хранилищу
      + для windows это webdav или сетевая папка
      + для linux это fuse, то есть монтируемое устройство как папка
    + клиент позволяет открывать ссылки на другие хранилища и файлы в них с помощью механизмов, описанных 
      в предыдущем пункте.
