* Цели и описание проекта
  Это уже наверное третья попытка проработать цели. Ну ничего, на этот раз уже будет реализация:)
  Суть в том, чтобы дать простой, визуально понятный и главное запоминающийся механизм хранения разнородной
  информации. Так чтобы человек мог как в реальной жизни запоминать где что хранится и работать с данными
  тоже единообразным образом. То есть одним и тем же набором инструметов совершать различные действия. В
  жизни мы делаем это руками, глазами и тд. Вот и работать с информацией нужно одним набором инструментов, а не
  с помощью тысячи и одной программ.
  Но сказать просто, а вот сделать сложнее.

* Как работает, из чего состоит.

  Пользователь попадает на пустой холст. На который может нанести:
  + изображение
  + текст
  + объект
    Объект обязательно принадлежит какому-то типу. Тип либо создаётся вновь, либо выбирается из существующих.
    Объекты одного типа отображаются в одном слое. Это позволяет выбрать только те типы объектов, которые хотите
    видеть. Например у вас карта города и вы хотите видеть только остановки транспорта. Выбираете отображение только
    остановок транспорта. Никакие другие объекты, вроде магазинов, заправок и прочего не отображаются.

   Допустим пользователь создаёт объект дорога и наносит такой объект на холст. Затем создаёт объект остановка и наносит
   два таких объекта вдоль дороги. Теперь он может выбрать в режиме отображения что отображать: 
   + дороги
   + остановки
   + дороги и остановки.
   
   Дальше он может кликнуть на одну из остановок и перед ним откроется чистый холст. На него он может нанести
   всё что знает о остановке, прикрепить фотографии и прочее. Затем проделать то же с другой остановкой.
   Конечно можно и кликнуть на дорогу. На появившемся новеньком холсте нанести всё что нужно знать об этой
   дороге. 

   Таким образом образом пользователь создал два новых типа объекта:
   + дорога
   + остановка
   
   Их можно посмотреть на панеле доступных объектов. Там объекты разделены на две группы:
   + все. То есть вообще все когда-либо созданные пользователями
   + те что используются вместе с тем типом объекта, на холсте которого вы находитесь.
     Например: на холсте объекта карта будут доступны остановки, дороги и прочее. А на холсте музыкального альбома -
     песни, клипы, автор и тд.

   Сами две это группы это холсты, а это значит что все объекты вы можете располагать как пожелаете. Также вы
   можете кликнуть на любой и в появившемся новом холсте добавить например описание типа объекта. Вы можете
   пойти дальше и присвоить объектам тип, заранее создав его. Так вы сможете настроить какие объекты отображать,
   а какие нет.

   В общем с помощью одних и тех же инструментов вы можете создавать объекты, описывать их с помощью других объектов
   и тд.

* где всё хранится
  Может быть несколько вариантов:
  + у вас на устройстве просто как набор файлов
  + в распределённой системе caravan, среди участников
  + в тех доступных хранилищах(скажем dropbox), для которых есть адаптеры

** storage swarm
   В общем пока названия нет, но суть в следующем: каждый пользователь, запускающий у себя сферу выделяет
   некоторое количество гигабайт для хранения данных. Эти гигабайты используются для хранения его данных
   и данных других людей. Допустим он выделяет 10 гигабайт, тогда он может хранить 1 гигабайт, 9ть же
   предоставляется другим. Но в этом случае другие хранят у себя его гигабайт, то есть получаем 10и кратную
   репликацию.
   В результате каждый пользователь получать что-то вроде папки, в которой может хранить файлы. У каждого 
   файла появляется ссылка, которую он может передать любому пользователю, у которого есть браузер. Если
   у принимающего пользователя есть программа сфера, то он может открыть саму папку с файлами и работать с ней
   как с локальной.
   В общем этакий аналог вещей вроде dropbox, но работает это исключительно за счёт самих клиентов, как
   bittorrent

*** как это работает?
    Каждый клиент поддерживает связь с по крайней мере 9ю другими. Для того, чтобы синхронизировать с ними
    свои данные. То есть один клиент вместе с 9ю другими образуют распределённое хранилище с репликацией.
    У этого хранилища есть id. Если кто-то из 10 исчезает, его место занимает другой, новопришедший. То есть
    в один момент времени всегда должно быть так, чтобы одно хранилище реплицировалось на 10 узлов. Запись
    в хранилище транзакционно, то есть запись идёт на один узел, а тот записывает на другие 9ть. И только когда
    данные записаны на все 10 узлов запись считается успешной. Это значит, что скорость записи невысока. 
    Алгоритм записи может быть и другим, например клиент записываеть сразу на 10ть. Но одно неизменно - запись
    всегда считается успешной, если она произведена на все 10 узлов. Чтение может быть параллельным со всех
    10и узлов. Для записи и чтения используется http put, post, get. Также в дальнейшем может быть использован
    и другой протокол, на основе udp.
    Все клиенты оранизуются в dht сеть так, что ключами являются id хранилищь, а данные в хранилищах имеют ключи
    похожие на id хранилищ. Поэтому при поиске данных используется dht.
    Итого:
    + каждый клиент это файловый http сервер, который поддерживает связь с 9ю такими же как он и синхронизирует
      данные.
    + синхронизация данных происходит простейшим способом, возможно с помощью rsync
    + все клиенты образуют единый dht рой
    + все файлы и хранилища(папки) имеют id, которые можно преобразовать в http ссылки и использовать прямо
      в браузере или допустим в плеере для доступа к ним
    + все данные реплицируются как минимум 10 раз
    + клиент в зависимости от платформы предоставляет максимально простой доступ к хранилищу
      + для windows это dokan, fuse аналог
      + для linux это fuse, то есть монтируемое устройство как папка
    + клиент позволяет открывать ссылки на другие хранилища и файлы в них с помощью механизмов, описанных 
      в предыдущем пункте.

*** несколько реальных сценариев использования
**** хранилище для работы с ним с разных устройств
     Допустим у вас есть ноутбук, десктоп, смартфон и ещё компьютер на работе. Любите слушать музыку, но и 
     хотите чтобы ваши рабочие документы всегда были с вами. Можно конечно таскать с собой флешку и всегда
     работать с неё, но тогда это должна быть microsd, чтобы её можно было втыкать в смартфон. А ещё в смартфон
     она должна втыкаться на горячую, в общем не очень удобно.
     
     Используя storage swarm вы создаёте хранилище нужного вам объёма, скажем с десктопа, учитывая при этом,
     чтобы размер хранилища влезал в доступную вам память на смартфоне. Выставляете репликацию в 0.
     Затем на смартфоне и ноутбуке вы подключаете это хранилище в режиме mirror и оно автоматически
     синхронизируется с содержимым десктопа. При этом со всех устройств вы имеете доступ на запись и чтение.
     То есть если вам кинули музычку во вконтактике, она вам понравилась, скачиваете и кидаете в хранилище 
     и теперь она у вас есть также на десктопе и ноутбуке. Тоже самое с документами. Можете редактировать их
     с десктопа, можете с ноутбука. Затем, выключаете десктоп и ноутбук и идёте на работу. Там подключаете
     хранилище на рабочем компьютере со смартфона в режиме mirror и продолжаете редактировать документы и 
     слушать любимую музыку, возможно добавляя новую или удаляя надоевшую. После работы вы приходите домой
     и хранилище со смартфона синхронизируется с ноутбуком и компьютером так, что с них вы можете продолжать
     редактировать документы, которые изменяли на работе. И так далее.
**** Хотите поделится свадебным видео, а может быть фотографиями?
     хотите хранить их вместе с семейными фотографиями и сообща иметь к ним доступ, иногда показывать их родным?
     Допустим один супруг создаёт хранилище нужного размера у себя на ноутбуке в режиме репликации 0, затем
     к это хранилище подключает себе другой супруг со своего десктопа в режиме журналирования. Затем оба супруга
     подключают себе хранилище в режиме зеркалирования на свои смартфоны. Они часто делают снимки, хранят там
     свадебные видео и тд. Когда они хотят поделиться этим со своими родными они просто предлагают им либо
     подключиться к хранилищу в режиме client, либо прямо из браузера смотреть содержимое. В режиме client
     же они могут свободно смотреть фотки, видео теми программами, которыми они это делают обычно. Также
     они могут подключить хранилище в режиме mirror и скинуть фотки сделанные ими. Так вместе все родные или 
     друзья или группа по интересам могут хранить общие файлы.
     
**** Создание большого каталога совместно
     Допустим собралась группа людей, чтобы сделать большой каталог музыки. Так чтобы разные жанры и исполнители
     были в одном месте. Как сейчас делают на том же rutracker. Но так, чтобы вся эта музыка была доступна
     как папка с музыкой. Если бы они попробовали сразу всё запихать в хранилище - получилось бы хранилище
     размеров в несколько террабайт, а то и больше. Не у всех есть только места, да и поддерживать одно хранилище
     сложнее, чем множество мелких. Для этих в storage есть механизм ссылок, когда вы можете поместить в
     хранилище ссылку на файл или папку в другом хранилище и эти папка или файл будут открываться как буд-то
     они находятся в этом хранилище. В этом случае всё что нужно - это чтобы хранилище-каталог было достаточной
     вместимости, чтобы разместить ссылки.
     Итак, эта группа определяется сколько примерно нужно для каталога ссылок. Ну допустим 2 гигабайта.
     Затем кто-то создаёт такое хранилище с уровнем репликации 10.
     Остальные, кто хочет редактировать, подключаются к нему в режиме mirror.
     Затем каждый, кто хочет выкладывать в каталог какую-то музыку создаёт себе хранилище того объёма, которого
     хватит чтобы вместить музыку, которую он хочет выложить. Использует уровень репликации 10.
     Теперь кагружает свою музыку в своё хранилище. При этом каждый может организовать эту музыку так как
     считает нужным. Я например всю музыку храню плоско, в одной папке и только те песни, что мне нравятся.
     Кто-то будет раскидывать по жанрам или настроениям.
     Далее каждый заходит в хранилище каталога и добавляет там ссылки на свою мызыку. Делается это так:
     Например создаётся папка Rock в ней создаётся папка русский и в ней например папка DDT.
     Затем в этой папке создаётся ссылка следующим образом. Ссылка это файл, название которого начинается с
     #link#, затем идёт название файла или папки, которое будет отображаться. А содержимое - это id хранилища/путь до файла.
     В нашем случае например мы хотим добавить песню ветер.
     Тогда название будет:
     #link#ветер.aac
     А содержимое:
     6F9619FF-8B86-D011-B42D-00CF4FC964FF/Музло/Главный плейлист/DDT/ветер.aac
     
     Важно то, что для редактирования ссылок нужно подсоединить раздел с опций show_links. Однако в таком
     режиме в хранилище будут показываться ссылки для реально хранящихся там файлов и папок. Иными словами
     вы будете видеть не только файлы, но и ссылки на них. Это нужно для того, чтобы передать кому-либо такую
     ссылку или для того, чтобы вставлять в другие хранилища ссылки на файлы просто копирую ссылку. То есть
     создать ссылку как в примере выше можно просто взять двухпанельный файл-менеджер, в одной панеле открыть
     хранилище-каталог, а в другой собственного хранилище с музыкой и просто скопировать ссылку.
